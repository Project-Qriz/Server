pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'qriz-api'
        DOCKER_TAG = "${BUILD_NUMBER}"
        AWS_REGION = 'ap-northeast-2'
        ECR_REGISTRY = '314146328505.dkr.ecr.ap-northeast-2.amazonaws.com'
        AWS_CREDENTIALS = 'aws-credentials'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', credentialsId: 'github-token', url: 'https://github.com/Project-Qriz/Server.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -t ${DOCKER_IMAGE}:${BUILD_NUMBER} .
                    docker tag ${DOCKER_IMAGE}:${BUILD_NUMBER} ${DOCKER_IMAGE}:latest
                """
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "${AWS_CREDENTIALS}",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            docker tag ${DOCKER_IMAGE}:latest 314146328505.dkr.ecr.ap-northeast-2.amazonaws.com/qriz/api:latest
                            docker push 314146328505.dkr.ecr.ap-northeast-2.amazonaws.com/qriz/api:latest
                        """

                        // 또는 내부 레지스트리를 사용하는 경우
                        // sh 'docker login your-registry -u username -p password'
                        // sh 'docker tag your-backend-app:latest your-registry/your-backend-app:latest'
                        // sh 'docker push your-registry/your-backend-app:latest'
                    }
                }
            }
        }

        stage('Deploy to Backend Server') {
            steps {
                withCredentials([
                    sshUserPrivateKey(credentialsId: 'backend-server-ssh-key', keyFileVariable: 'SSH_KEY'),
                    [
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "${AWS_CREDENTIALS}",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    // AWS 자격 증명을 백엔드 서버에 전달
                    sh '''
                        # ECR 로그인 명령어 생성
                        LOGIN_COMMAND=$(aws ecr get-login-password --region ap-northeast-2 | sed 's/$//' | sed 's/^//')

                        # SSH를 통해 백엔드 서버에 명령 실행
                        ssh -i ${SSH_KEY} -o StrictHostKeyChecking=no ec2-user@10.0.2.212 "
                            # ECR 로그인
                            echo $LOGIN_COMMAND | docker login --username AWS --password-stdin 314146328505.dkr.ecr.ap-northeast-2.amazonaws.com &&

                            # 8081 포트 사용 중인 프로세스 확인 및 중지
                            PORT_PID=\$(lsof -t -i:8081 || echo '')
                            if [ ! -z \"\$PORT_PID\" ]; then
                                echo '포트 8081을 사용 중인 프로세스를 중지합니다.'
                                kill -9 \$PORT_PID || true
                            fi

                            # 모든 관련 컨테이너 중지 및 제거
                            docker ps -a | grep -i backend | awk '{print \$1}' | xargs -r docker stop || true
                            docker ps -a | grep -i backend | awk '{print \$1}' | xargs -r docker rm || true

                            # 새 이미지 가져오기 및 실행
                            docker pull 314146328505.dkr.ecr.ap-northeast-2.amazonaws.com/qriz/api:latest &&
                            docker run -d --name backend-container -p 8081:8081 314146328505.dkr.ecr.ap-northeast-2.amazonaws.com/qriz/api:latest
                        "
                    '''
                }
            }
        }
    }

    post {
        success {
            echo '도커 이미지 빌드 및 배포가 성공적으로 완료되었습니다!'
        }
        failure {
            echo '배포 중 오류가 발생했습니다.'
            // 실패 시 이전 버전으로 롤백하는 로직 추가 가능
        }
        always {
            // 불필요한 이미지 정리
            sh 'docker rmi $(docker images -f "dangling=true" -q) || true'
        }
    }
}